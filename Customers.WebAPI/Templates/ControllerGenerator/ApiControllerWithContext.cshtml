@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@{
if (@Model.NullableEnabled)
{
@:#nullable disable

}
}
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

//Generated from Custom Template.
namespace @Model.ControllerNamespace
{
@{
    string routePrefix = "api/" + Model.ControllerRootName;
    var entitySetName = Model.ModelMetadata.EntitySetName;
    var primaryKeyName = Model.ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = Model.ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyType = Model.ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyIsAutoGenerated = Model.ModelMetadata.PrimaryKeys[0].IsAutoGenerated;
    
    var readRequestType = "Read" + @Model.ModelTypeName + "Request";
    var createRequestType = "Create" + @Model.ModelTypeName + "Request";
    var updateRequestType = "Update" + @Model.ModelTypeName + "Request";
    var deleteRequestType = "Delete" + @Model.ModelTypeName + "Request";
}
    [Route("api/[controller]")]
    [ApiController]
    public class @Model.ControllerName : ControllerBase
    {
        private readonly IMediator _mediator;

        public @(@Model.ControllerName + "(IMediator mediator)")
        {
            _mediator = mediator;
        }

        // GET: @routePrefix
        [HttpGet]
        public async Task<IActionResult> Get()
        {
            var response = await _mediator.Send(new @(readRequestType + "()"));
            var list = await response.ToListAsync();
            return Ok(list);
        }

        // GET: @routePrefix/5
        [HttpGet("{id}")]
        public async Task<IActionResult> Get(@primaryKeyShortTypeName id)
        {
            var response = await _mediator.Send(new @(readRequestType + "()"));
            var item = await response.SingleOrDefaultAsync(r => r.Id == id);
            return Ok(item);
        }

		// POST: @routePrefix
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost]
        public async Task<IActionResult> Post(@createRequestType request)
        {
            if (ModelState.IsValid)
            {
                var response = await _mediator.Send(request);
                return Ok(response);
            }
            return BadRequest(ModelState);
        }

        // PUT: @routePrefix
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPut]
        public async Task<IActionResult> Put(@updateRequestType request)
        {
            if (ModelState.IsValid)
            {
                var response = await _mediator.Send(request);
                return Ok(response);
            }
            return BadRequest(ModelState);
        }

        // DELETE: @routePrefix/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(@primaryKeyShortTypeName id)
        {
            var response = await _mediator.Send(new @(deleteRequestType + "() { Id = id }"));
            return Ok(response);
        }
	}
}
